We saw few of the methods for synchronization in the Thread class

start()
join()
sleep()
wait()
Above approaches have a few drawbacks:

No Fine-Grained Control: Suppose, for instance ,
we want Task3 to run after any one of Task1 or Task2 is done. How do we do it?
-- invokeAny()

Difficult to maintain: Imagine managing 5-10 threads with code written in earlier examples.
It would become very difficult to maintain.
-- Executors.newFixedThreadPool(3);

NO Sub-Task Return Mechanism: With the Thread class or the Runnable interface,
there is no way to get the result from a sub-task.
-- implements Callable<String> -->call --> Future<String> welcomeFuture--> .get()